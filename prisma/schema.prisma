generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Race {
  id                        Int                         @id @default(autoincrement())
  name                      String
  date                      DateTime
  isProcessed               Boolean                     @default(false)
  platform                  String
  processingStatus          String                      @default("PENDING")
  url                       String
  globalRaceBasketHistory   GlobalRaceBasketHistory[]
  leagueRaces               LeagueRace[]
  leagueRaceCircuitoRanking LeagueRaceCircuitoRanking[]
  RaceBasketClassification  RaceBasketClassification[]
  history                   RaceProcessingHistory[]
  participations            RunnerParticipation[]
}

model RunnerParticipation {
  id                       Int     @id @default(autoincrement())
  raceId                   Int
  bibNumber                Int
  realPosition             Int
  realTime                 String
  realPace                 String
  officialPosition         Int
  officialTime             String
  officialPace             String
  category                 String
  fullName                 String
  gender                   String
  name                     String
  surname                  String
  club                     String
  finished                 Boolean
  realCategoryPosition     Int
  realGenderPosition       Int
  officialCategoryPosition Int
  officialGenderPosition   Int
  runnerId                 Int?
  race                     Race    @relation(fields: [raceId], references: [id])
  runner                   Runner? @relation(fields: [runnerId], references: [id])
}

model RaceBasketClassification {
  id               Int      @id @default(autoincrement())
  runnerId         Int
  raceId           Int
  generalPosition  Int
  categoryPosition Int
  localPosition    Int
  time             String
  pace             String
  createdAt        DateTime @default(now())
  bibNumber        Int
  points           Float
  race             Race     @relation(fields: [raceId], references: [id])
  runner           Runner   @relation(fields: [runnerId], references: [id])
}

model GlobalRaceBasketClassification {
  id             Int    @id @default(autoincrement())
  runnerId       Int
  generalFirst   Int    @default(0)
  generalSecond  Int    @default(0)
  generalThird   Int    @default(0)
  categoryFirst  Int    @default(0)
  categorySecond Int    @default(0)
  categoryThird  Int    @default(0)
  localFirst     Int    @default(0)
  localSecond    Int    @default(0)
  localThird     Int    @default(0)
  teamsFirst     Int    @default(0)
  teamsSecond    Int    @default(0)
  teamsThird     Int    @default(0)
  points         Float  @default(0.0)
  leagueId       Int
  position       Int    @default(0)
  league         League @relation(fields: [leagueId], references: [id])
  runner         Runner @relation(fields: [runnerId], references: [id])
}

model GlobalRaceBasketHistory {
  id             Int      @id @default(autoincrement())
  raceId         Int
  runnerId       Int
  leagueId       Int
  generalFirst   Int      @default(0)
  generalSecond  Int      @default(0)
  generalThird   Int      @default(0)
  categoryFirst  Int      @default(0)
  categorySecond Int      @default(0)
  categoryThird  Int      @default(0)
  localFirst     Int      @default(0)
  localSecond    Int      @default(0)
  localThird     Int      @default(0)
  teamsFirst     Int      @default(0)
  teamsSecond    Int      @default(0)
  teamsThird     Int      @default(0)
  points         Float    @default(0.0)
  createdAt      DateTime @default(now())
  league         League   @relation(fields: [leagueId], references: [id])
  race           Race     @relation(fields: [raceId], references: [id])
  runner         Runner   @relation(fields: [runnerId], references: [id])
}

model Runner {
  id                             Int                              @id @default(autoincrement())
  name                           String
  surname                        String
  photoUrl                       String?
  GlobalRaceBasketClassification GlobalRaceBasketClassification[]
  GlobalRaceBasketHistory        GlobalRaceBasketHistory[]
  leagueParticipant              LeagueParticipant[]
  RaceBasketClassification       RaceBasketClassification[]
  RunnerParticipation            RunnerParticipation[]
}

model RaceProcessingHistory {
  id           Int      @id @default(autoincrement())
  raceId       Int
  processedAt  DateTime @default(now())
  status       String
  errorDetails String?
  race         Race     @relation(fields: [raceId], references: [id])
}

model League {
  id                             Int                              @id @default(autoincrement())
  name                           String
  startDate                      DateTime
  endDate                        DateTime
  scoringMethodId                Int
  photoUrl                       String                           @default("")
  visible                        Boolean                          @default(false)
  type                           LeagueType                       @default(CIRCUITO)
  globalRaceBasketClassification GlobalRaceBasketClassification[]
  globalRaceBasketHistory        GlobalRaceBasketHistory[]
  scoringMethod                  ScoringMethod                    @relation(fields: [scoringMethodId], references: [id])
  leagueGlobalCircuitoRanking    LeagueGlobalCircuitoRanking[]
  participants                   LeagueParticipant[]
  races                          LeagueRace[]
  leagueRaceCircuitoRanking      LeagueRaceCircuitoRanking[]
}

model LeagueParticipant {
  id                          Int                           @id @default(autoincrement())
  leagueId                    Int
  runnerId                    Int
  bibNumber                   Int
  disqualified_at_race_order  Int                           @default(9999)
  leagueGlobalCircuitoRanking LeagueGlobalCircuitoRanking[]
  league                      League                        @relation(fields: [leagueId], references: [id])
  runner                      Runner                        @relation(fields: [runnerId], references: [id])
  leagueRaceCircuitoRanking   LeagueRaceCircuitoRanking[]
}

model LeagueRace {
  id       Int    @id @default(autoincrement())
  leagueId Int
  raceId   Int
  order    Int    @default(0)
  league   League @relation(fields: [leagueId], references: [id])
  race     Race   @relation(fields: [raceId], references: [id])
}

model LeagueRaceCircuitoRanking {
  id            Int               @id @default(autoincrement())
  leagueId      Int
  raceId        Int
  participantId Int
  position      Int
  points        Float
  realPace      String
  top5Finishes  Boolean           @default(false)
  league        League            @relation(fields: [leagueId], references: [id])
  participant   LeagueParticipant @relation(fields: [participantId], references: [id])
  race          Race              @relation(fields: [raceId], references: [id])
}

model LeagueGlobalCircuitoRanking {
  id                   Int               @id @default(autoincrement())
  leagueId             Int
  participantId        Int
  position             Int
  points               Float
  top5Finishes         Int               @default(0)
  numberParticipantion Int
  bestPosition         Int
  bestRealPace         String
  league               League            @relation(fields: [leagueId], references: [id])
  participant          LeagueParticipant @relation(fields: [participantId], references: [id])
}

model ScoringMethod {
  id                 Int                @id @default(autoincrement())
  name               String
  description        String
  pointsDistribution String
  modelType          ModelType
  leagues            League[]
  sortingAttributes  SortingAttribute[]
}

model SortingAttribute {
  id            Int           @id @default(autoincrement())
  methodId      Int
  attribute     String
  order         SortOrder
  priorityLevel Int
  method        ScoringMethod @relation(fields: [methodId], references: [id])
}

enum ModelType {
  CIRCUITO
  BASKET
}

enum SortOrder {
  ASC
  DESC
}

enum LeagueType {
  CIRCUITO
  BASKET
}

model User {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}